# blatantly lifted from https://github.com/init4tech/actions/blob/main/.github/workflows/rust-base.yml
name: Rust

on:
  push:
    branches: [main]
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
  pull_request:

jobs:
  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly

      - uses: Swatinem/rust-cache@v2

      - name: Run Unit Tests
        run: make test

  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt

      - uses: Swatinem/rust-cache@v2

      - name: Check formatting
        run: make format-check

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy

      - uses: Swatinem/rust-cache@v2

      - name: Lint
        run: make lint-check

  build:
    name: Test Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Initialize Git submodules
        run: git submodule update --init --recursive

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly

      - uses: Swatinem/rust-cache@v2

      - name: Build
        run: make build

  # TODO: eventually move this to a separate workflow
  release:
    needs: [unit-test, fmt, lint, build]
    if: startsWith(github.ref, 'refs/tags/')
    timeout-minutes: 60 # 60 minutes
    name: Create Release for ${{ matrix.target }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Setup ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Initialize Git submodules
        run: git submodule update --init --recursive
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          target: ${{ matrix.target }}
          override: true
      - uses: Swatinem/rust-cache@v2

      - name: Build for macOS ARM
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          rustup target add aarch64-apple-darwin
          cargo build --release --target aarch64-apple-darwin

          # Copy binaries with appropriate names
          cp target/aarch64-apple-darwin/release/pcl pcl-aarch64-apple
          cp target/aarch64-apple-darwin/release/phorge phorge-aarch64-apple || true

      - name: Build for other targets
        if: matrix.target != 'aarch64-apple-darwin' && matrix.target != 'aarch64-unknown-linux-gnu'
        run: |
          cargo build --release --target ${{ matrix.target }}

          # Extract architecture and OS from target
          arch=$(echo ${{ matrix.target }} | cut -d'-' -f1)
          os=$(echo ${{ matrix.target }} | cut -d'-' -f2)

          # Copy binaries with appropriate names
          cp target/${{ matrix.target }}/release/pcl pcl-$arch-$os
          cp target/${{ matrix.target }}/release/phorge phorge-$arch-$os || true

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            pcl-*
            phorge-*
          draft: false
          prerelease: false
          generate_release_notes: true
